{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOOv8ms6i22UzVl4DnJ77uY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"a5gH_qhntKfs"},"outputs":[],"source":["import random\n","\n","class TernaryNAS:\n","    def __init__(self):\n","        self.population_size = 10\n","        self.generations = 5\n","\n","    def evolve_architectures(self):\n","        population = [self.random_architecture() for _ in range(self.population_size)]\n","        for gen in range(self.generations):\n","            scores = [(arch, self.evaluate(arch)) for arch in population]\n","            scores.sort(key=lambda x: x[1], reverse=True)\n","            elites = [s[0] for s in scores[:2]]\n","            population = elites + [self.mutate(random.choice(elites)) for _ in range(self.population_size - 2)]\n","        return scores[0]\n","\n","    def random_architecture(self):\n","        return {'layers': random.randint(1, 5), 'neurons': [random.choice([3, 9, 27]) for _ in range(3)]}\n","\n","    def mutate(self, arch):\n","        arch['layers'] += random.choice([-1, 1])\n","        arch['neurons'] = [n + random.choice([-3, 3]) for n in arch['neurons']]\n","        return arch\n","\n","    def evaluate(self, arch):\n","        return random.random()\n","\n","\n","# File: ternary_nn_demo.ipynb\n","\n","{\"cells\": [{\"cell_type\": \"code\", \"source\": [\"from ternary_nas import TernaryNAS\\n\", \"nas = TernaryNAS()\\n\", \"best_arch = nas.evolve_architectures()\\n\", \"print(\\\"Best Architecture:\\\", best_arch)\"]}], \"metadata\": {}, \"nbformat\": 4, \"nbformat_minor\": 0}\n"]}]}