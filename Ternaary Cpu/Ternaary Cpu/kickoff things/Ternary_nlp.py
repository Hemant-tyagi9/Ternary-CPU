{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMyJfEAdPwLIyoQyyttvWhl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"_ccajS52uIT1"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","\n","class TernaryEmbedding(nn.Module):\n","    def __init__(self, vocab_size, d_model):\n","        super().__init__()\n","        self.embed = nn.Embedding(vocab_size, d_model)\n","\n","    def forward(self, x):\n","        return self.embed(x).sign()\n","\n","class TernaryTransformer(nn.Module):\n","    def __init__(self, vocab_size, d_model=128):\n","        super().__init__()\n","        self.embedding = TernaryEmbedding(vocab_size, d_model)\n","        self.encoder = nn.Linear(d_model, d_model)\n","        self.classifier = nn.Linear(d_model, 3)  # 3 classes: {-1, 0, 1}\n","\n","    def forward(self, x):\n","        x = self.embedding(x)\n","        x = torch.tanh(self.encoder(x))\n","        return self.classifier(x)\n","\n"]}]}